class ReportTemplateGenerator {
  constructor() {
    this.filename =
      `${this.reportInfo.studentName}_${this.reportInfo.courseName}_${this.reportInfo.reportTitle}.tex`.replaceAll(
        /[\\/:*?"<>|]/g,
        "_"
      )
    this.template = reportTemplate(
      this.reportInfo.courseName,
      this.reportInfo.reportTitle,
      this.reportInfo.studentName,
      this.reportInfo.deadline,
      this.reportInfo.description
    )
  }

  private readonly reportInfo = searchReportInfo(document)
  private filename: string
  private template: string

  public renderReportGeneratorRow() {
    const reportTable = document.getElementsByClassName("stdlist-reportV2")[0]
    if (!reportTable) return

    const button = document.createElement("button")
    const tr = reportTable.appendChild(document.createElement("tr"))
    const th = tr.appendChild(document.createElement("th"))
    const td = tr.appendChild(document.createElement("td"))
    button.innerText = chrome.i18n.getMessage("generate_report_template")
    th.innerText = chrome.i18n.getMessage("report_template")
    td.appendChild(button)

    button.addEventListener("click", () => {
      const blob = new Blob([this.template], {
        type: "application/x-tex",
      })
      const url = window.webkitURL.createObjectURL(blob)
      chrome.runtime.sendMessage({
        url,
        filename: this.filename,
      })
    })
  }
}

const searchReportInfo = (document: Document) => {
  const courseNameElement = document.getElementById("coursename")
  const screennameElement = document.getElementById("screenname")
  const reportTitleElement = document.querySelector<HTMLTableCellElement>(
    ".stdlist-reportV2 .title th"
  )
  const tdElements = document.querySelectorAll<HTMLTableCellElement>(
    ".stdlist-reportV2 td"
  )
  const descriptionElement = tdElements[0]
  const deadlineElement = tdElements[1]

  const courseName =
    courseNameElement?.title ?? chrome.i18n.getMessage("course_name")
  const reportTitle =
    reportTitleElement?.innerText ?? chrome.i18n.getMessage("report_title")
  const description =
    descriptionElement?.innerText ?? chrome.i18n.getMessage("description")
  const studentName =
    screennameElement?.innerText ?? chrome.i18n.getMessage("student_name")
  const deadline = new Date(
    deadlineElement?.innerText.substring(0, 16) ??
      chrome.i18n.getMessage("deadline")
  )

  return {
    courseName,
    reportTitle,
    studentName,
    deadline,
    description,
  }
}

// TODO: enable users to customize the template
// TODO: internationalize the template
const reportTemplate = (
  courseName: string,
  reportTitle: string,
  studentName: string,
  deadline: Date,
  description: string
) => `% This file is generated by manaba Enhanced.
% The deadline is ${deadline.toLocaleString()}.

\\documentclass{ltjsarticle}
\\usepackage{listings}

\\begin{document}
\\title{${courseName}\\\\${reportTitle} レポート}
\\author{${studentName}\\\\（学籍番号：〈学籍番号〉）}
\\lstset{
numbers=left,
frame=single,
breaklines=true,
}

\\maketitle

\\section{問1}
\\subsection{問}
${description}

\\subsection{解答}

\\end{document}
`

export { ReportTemplateGenerator }
