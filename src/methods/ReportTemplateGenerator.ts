class ReportTemplateGenerator {
  constructor(
    public readonly filename: string = "",
    public readonly template: string = ""
  ) {
    this.filename ||=
      `${this.reportInfo.studentName}_${this.reportInfo.courseName}_${this.reportInfo.reportTitle}.tex`.replaceAll(
        /[\\/:*?"<>|]/g,
        "_"
      )
    this.template ||= reportTemplate(
      this.reportInfo.courseName,
      this.reportInfo.reportTitle,
      this.reportInfo.studentName,
      this.reportInfo.deadline,
      this.reportInfo.description
    )
  }

  private readonly reportInfo = new ReportInfo(document)

  public renderReportGeneratorRow() {
    const button = document.createElement("button")
    const reportTable = document.getElementsByClassName("stdlist-reportV2")[0]
    const tr = reportTable.appendChild(document.createElement("tr"))
    const th = tr.appendChild(document.createElement("th"))
    const td = tr.appendChild(document.createElement("td"))
    button.innerText = chrome.i18n.getMessage("generate_report_template")
    th.innerText = chrome.i18n.getMessage("report_template")
    td.appendChild(button)

    button.addEventListener("click", () => {
      const blob = new Blob([this.template], {
        type: "application/x-tex",
      })
      const url = window.webkitURL.createObjectURL(blob)
      chrome.runtime.sendMessage({
        url,
        filename: this.filename,
      })
    })
  }
}

class ReportInfo {
  constructor(document: Document) {
    if (document === null) {
      throw new Error("document is not defined")
    }
    const courseNameElement = document.getElementById("coursename")
    const screennameElement = document.getElementById("screenname")
    const tdElements = document
      .getElementsByClassName("stdlist-reportV2")[0]
      .getElementsByTagName("td")
    const deadlineElement = tdElements && tdElements.item(2)
    const descriptionElement = tdElements && tdElements.item(0)
    this.courseName = courseNameElement
      ? courseNameElement.title
      : chrome.i18n.getMessage("course_name")
    this.reportTitle = document
      .getElementsByClassName("stdlist-reportV2")[0]
      .getElementsByClassName("title")[0]
      .getElementsByTagName("th")[0].innerText
    this.studentName = screennameElement
      ? screennameElement.innerText
      : chrome.i18n.getMessage("student_name")
    this.deadline = new Date(
      deadlineElement
        ? deadlineElement.innerText.substring(0, 16)
        : chrome.i18n.getMessage("deadline")
    )
    this.description = descriptionElement
      ? descriptionElement.innerText
      : chrome.i18n.getMessage("description")
  }
  public readonly courseName: string
  public readonly reportTitle: string
  public readonly studentName: string
  public readonly deadline: Date
  public readonly description: string
}

// TODO: enable users to customize the template
// TODO: internationalize the template
const reportTemplate = (
  courseName: string,
  reportTitle: string,
  studentName: string,
  deadline: Date,
  description: string
) => `% This file is generated by manaba Enhanced.
% The deadline is ${deadline.toLocaleString()}.

\\documentclass{ltjsarticle}
\\usepackage{listings}

\\begin{document}
\\title{${courseName}\\\\${reportTitle} レポート}
\\author{${studentName}\\\\（学籍番号：〈学籍番号〉）}
\\lstset{
numbers=left,
frame=single,
breaklines=true,
}

\\section{問1}
\\subsection{問}
${description}

\\subsection{解答}

\\maketitle
\\end{document}
`

export { ReportTemplateGenerator }
