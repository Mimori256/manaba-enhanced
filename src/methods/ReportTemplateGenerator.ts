class ReportTemplateGenerator {
  constructor(rawFilename: string, rawTemplate: string) {
    this.filename = this.parseFilename(
      rawFilename || ReportTemplateGenerator.defaultFilename
    )
    this.template = this.parseTemplate(
      rawTemplate || ReportTemplateGenerator.defaultTemplate
    )
    this.reportInfo = this.searchReportInfo(document)
  }

  public readonly filename: string
  public readonly template: string
  public readonly reportInfo: ReturnType<typeof this.searchReportInfo>

  public renderReportGeneratorRow() {
    const reportTable = document.getElementsByClassName("stdlist-reportV2")[0]
    if (!reportTable) return

    const button = document.createElement("button")
    const tr = reportTable.appendChild(document.createElement("tr"))
    const th = tr.appendChild(document.createElement("th"))
    const td = tr.appendChild(document.createElement("td"))
    td.classList.add("left")

    button.innerText = chrome.i18n.getMessage("generate_report_template")
    button.classList.add("manabaOriginalButton")

    th.innerText = chrome.i18n.getMessage("report_template")

    td.appendChild(button)

    button.addEventListener("click", () => {
      const blob = new Blob([this.template], {
        type: "application/x-tex",
      })
      const url = window.webkitURL.createObjectURL(blob)
      chrome.runtime.sendMessage({
        url,
        filename: this.filename,
      })
    })
  }

  private searchReportInfo = (document: Document) => {
    const courseNameElement = document.getElementById("coursename")
    const screennameElement = document.getElementById("screenname")
    const reportTitleElement = document.querySelector<HTMLTableCellElement>(
      ".stdlist-reportV2 .title th"
    )
    const tdElements = document.querySelectorAll<HTMLTableCellElement>(
      ".stdlist-reportV2 td"
    )
    const descriptionElement = tdElements[0]
    const deadlineElement = tdElements[1]

    const courseName =
      courseNameElement?.title ?? chrome.i18n.getMessage("course_name")
    const reportTitle =
      reportTitleElement?.innerText ?? chrome.i18n.getMessage("report_title")
    const description =
      descriptionElement?.innerText ?? chrome.i18n.getMessage("description")
    const studentName =
      screennameElement?.innerText ?? chrome.i18n.getMessage("student_name")
    const deadline = new Date(
      deadlineElement?.innerText.substring(0, 16) ??
        chrome.i18n.getMessage("deadline")
    )

    return {
      courseName,
      reportTitle,
      studentName,
      deadline,
      description,
    }
  }

  private injectReportInfoIntoRawText = (
    rawText: string,
    reportInfo: ReturnType<typeof this.searchReportInfo>
  ) =>
    Object.entries(reportInfo).reduce(
      (acc, [key, value]) =>
        acc.replaceAll(
          `{{${key}}}`,
          typeof value === "string" ? value : value.toLocaleString()
        ),
      rawText
    )

  private parseFilename = (rawFilename: string) =>
    this.injectReportInfoIntoRawText(rawFilename, this.reportInfo).replaceAll(
      /[\\/:*?"<>|]/g,
      "_"
    )

  private parseTemplate = (rawTemplate: string) =>
    this.injectReportInfoIntoRawText(rawTemplate, this.reportInfo)

  static defaultFilename = `{{studentName}}_{{courseName}}_{{reportTitle}}.tex`

  // TODO: internationalize the template
  static defaultTemplate = `% This file is generated by manaba Enhanced.
  % The deadline is {{deadline}}.
  
  \\documentclass{ltjsarticle}
  \\usepackage{listings}
  
  \\begin{document}
  \\title{{{courseName}}\\\\{{reportTitle}} レポート}
  \\author{{{studentName}}\\\\（学籍番号：〈学籍番号〉）}
  \\lstset{
  numbers=left,
  frame=single,
  breaklines=true,
  }
  
  \\maketitle
  
  \\section{問1}
  \\subsection{問}
  {{description}
  
  \\subsection{解答}
  
  \\end{document}
`
}


export { ReportTemplateGenerator }
